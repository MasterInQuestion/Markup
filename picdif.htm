<meta charset="UTF-8" />
<title>picdif - diff 2 pictures by overlaying</title>
<!-- Side by side without JavaScript -->
<html onclick="toggle();" ontouchend="
// Unnecessary for Firefox (or non-touch input): removal may improve reliability.
	if ( ! _m && event.touches.length === 0 ) {
/*
	`touches` appears buggy:
	https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/touches
	(apparent misalignment; likely unfixable at this point)
*/
	var X = _X, Y = _Y;
	_X = event.changedTouches[0].screenX;
	_Y = event.changedTouches[0].screenY;
	if (
	_ - ( _ = event.timeStamp ) >= -500 &&
	Math.abs( _X - X ) <= 16 &&
	Math.abs( _Y - Y ) <= 16
	) { toggle(); return false; };
// Mainly to workaround double-click zooming on some mobile browsers.
	}; _m = false;
	"
	ontouchmove="_m = true;"
	onkeydown="return kbd_toggle( event );">
<!--
	Trick simulating "preventDefault": Broader browser compatibility.
	Must be specified so. (may not work merely specified in "onkeydown" function)

	"event" here is context-dependent multi-meaning. (don't change its name)
-->
<meta name="viewport" content="initial-scale=1" /><!--
<meta name="viewport" content="initial-scale=1, user-scalable=no" />
	https://github.com/MasterInQuestion/Markup/commit/47793e7005d838a6eafdf2289b2cb4100178e12e
-->
<style>
	html { background-color: #002b36; }
	body { display: inline-block; margin: 5em;
	user-select: none; -moz-user-select: none; -webkit-user-select: none; -ms-user-select: none; }
/*
	img { width: 2048px; height: 2048px; }
	#\30 { background-color: #F00; }
	#\31 { background-color: #0F0; }
*/
</style>
	<img id="0" src="" />
	<img id="1" src="" />
<script>
	var _m; // Not defining this pointless undefined may cause misbehavior...
	_ = _X = _Y = 0;
	_0 = document.getElementById( "0" );
	_1 = document.getElementById( "1" );
	getTitle( _0 ); getTitle( _1 );

	function getTitle ( x ) {
	x.title = "#" + x.id + " " +
	decodeURIComponent( x.src.match( /(?:\/|^)([^\/]*)\/*$/ )[1] );
	};

	onload = function () {
	_0.onload = _0.onerror = function () { f( _0 ); };
	_1.onload = _1.onerror = function () { f( _1 ); };
// "loadstart" maybe unavailable for "<img>".
	function f ( x ) {
	getTitle( x );
	( x.style.display !== "none" ) && ( document.title = x.title );
	};
	( _0.style.display !== "none" &&
	_1.style.display !== "none" ) && toggle();
	};

	function toggle () {
	_1.style.display === "none" ? (
	_0.style.display = "none",
	_1.style.display = "inline",
	toggleTitle( _1 ) )
	: (
	_1.style.display = "none",
	_0.style.display = "inline",
	toggleTitle( _0 ) );
	};

	function toggleTitle ( x ) {
	document.title = x.title;
//	location.replace( location.href.replace( /(?:#.*)?$/, "#" + x.id ) );
// ^ May cause unwanted viewport jump.
	};

	function kbd_toggle ( e ) {
	if (
	e.keyCode === 0x20 ||
	e.which === 0x20 /* 【Space】 */
	) {
	toggle();
	return false;
	};
	return true;
	};
</script>
<!--

	At the moment browsers have limited support for programmatic interoperation with zoom.
	Hacky workaround is indeed possible. Yet reluctant to bother.

-->
